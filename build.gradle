plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.103'
    id "com.modrinth.minotaur" version "2.+"
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name "cursemaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        url "https://jitpack.io"
        content {
            includeGroup "com.github.rtyley"
        }
    }
    maven {
        url "https://maven.wispforest.io/releases"
        content {
            includeGroup "io.wispforest"
            includeGroup "io.wispforest.endec"
        }
    }
    maven {
        url "https://maven.su5ed.dev/releases"
        content {
            includeGroup "org.sinytra"
            includeGroup "org.sinytra.forgified-fabric-api"
        }
    }
    maven {
        url "https://code.redspace.io/releases"
        content {
            includeGroup "io.redspace"
        }
    }
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.patchouli"
        }
    }
    maven {
        url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        url "https://maven.theillusivec4.top"
        content {
            includeGroup("top.theillusivec4.curios")
        }
    }
}

base {
    archivesName = "$mod_id-$minecraft_version"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            programArguments.addAll '--width', '1920', '--height', '1080'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            systemProperty 'mixin.debug.export', 'true'
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation("io.wispforest:accessories-neoforge:${accessories_version}+${minecraft_version}")
    implementation("vazkii.patchouli:Patchouli:${patchouli_version}")
    implementation("software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}")
    implementation("maven.modrinth:accessories-compat-layer:${accessories_compat_layer_version}")
    implementation("maven.modrinth:curios:${curios_version}")
    implementation("io.redspace:irons_spellbooks:${minecraft_version}-${irons_spells_version}") {
        exclude group: "top.theillusivec4.curios", module: "curios-neoforge"
    }
    implementation("curse.maven:touhou-little-maid-355044:${tlm_curse_version}") {
        exclude group: "maven.modrinth", module: "sodium"
        exclude group: "maven.modrinth", module: "embeddium"
    }
    implementation("maven.modrinth:jade:${jade_version}")
    compileOnly("maven.modrinth:yes-steve-model:${ysm_version}")
    runtimeOnly("maven.modrinth:appleskin:${appleskin_version}")
    runtimeOnly("maven.modrinth:playeranimator:${playeranimator_version}")
    runtimeOnly("maven.modrinth:jei:${jei_version}")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version               : minecraft_version,
            minecraft_version_range         : minecraft_version_range,
            neo_version                     : neo_version,
            neo_version_range               : neo_version_range,
            loader_version_range            : loader_version_range,
            mod_id                          : mod_id,
            mod_name                        : mod_name,
            mod_license                     : mod_license,
            mod_version                     : mod_version,
            mod_authors                     : mod_authors,
            mod_description                 : mod_description,
            irons_spells_version_range      : irons_spells_version_range,
            touhou_little_maid_version_range: touhou_little_maid_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

createMinecraftArtifacts {
    dependsOn generateModMetadata
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mod_id
    // versionNumber = "1.0.0"
    versionType = "beta"
    uploadFile = jar
    gameVersions = ["1.21.1"]
    loaders = ["neoforge"]
    dependencies {
        required.project "touhou-little-maid"
        required.project "irons-spells-n-spellbooks"
        optional.version "yes-steve-model", "2.5.0-neoforge+mc1.21.1"
    }
}